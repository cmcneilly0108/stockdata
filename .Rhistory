colnames(iPrice) <- c('ticker','startPrice')
allPrices <- join(allPrices,iPrice)
# Scale the price by start price
# allPrices$newPrice <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gain <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gainP <- percent((allPrices$close/allPrices$startPrice) - 1)
# In order to pick which one to sell
#last <- max(ymd(allPrices$date[!is.na(allPrices$date)]))
#first <- min(ymd(allPrices$date[!is.na(allPrices$date)]))
#m3 <- last - days(90)
#m6 <- last - days(180)
# Create df with tickers and purchase date
# Calculate gain for past year
# subset(allPrices,date==last | date==m6 | date==m3,select=c(date,ticker,gain))
results <- subset(allPrices,date==max(allPrices$date),select=c(date,ticker,gain,gainP))
# Sort results by gain descending
#print(results[order(-results$gain),c('ticker','gainP')])
}
# update!  run bash shell, load xlsx, convert
# Update data files
fd <- file.info("ss.xlsx")$mtime
cd <- Sys.time()
dt <- difftime(cd, fd, units = "hours")
if (dt > 10) {
#system("./getSS.sh")
#system("./getET.sh")
}
callmorningstar <- function(ticker) {
url <- paste("http://financials.morningstar.com/company-profile/c.action?t=",
ticker,"&region=usa&culture=en-US",sep="")
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html")
# extract the content you need
pg <- read_html("scrape.html")
nt <- html_nodes(pg, xpath='//td') %>% html_text()
stockType <- nt[1]
stockSector <- nt[32]
stockIndustry <- nt[34]
data.frame(ticker=ticker,type=stockType,sector=stockSector,industry=stockIndustry)
}
et <- read.csv('etrade.csv',stringsAsFactors = FALSE,skip=6)
#et <- filter(et,!(Symbol %in% c('CASH','TOTAL')))
et <- head(et,-3)
portfolio <- mutate(et,type=ifelse(Symbol %in% c('YAFFX','PENNX','HFCGX','FAGIX','CHTTX','RZV','DGS','FM','VNQ','FPX','SPY','WHOSX','RSP','EQAL'),'fund','stock'))
#h2 <- read.csv("pfmDownload.csv",stringsAsFactors=FALSE)
colnames(portfolio) <- gsub("[^[:alnum:]///' ]", "", colnames(portfolio))
h2 <- filter(portfolio,type=='stock')
h2$Ticker <- as.character(h2$Symbol)
holdings <- h2$Ticker
holdings <- c(holdings,'CHGG','SPY')
p <- read.xlsx('ss.xlsx',1,skipEmptyRows = TRUE)
#p <- rename(p,Ticker=Company.(Ticker))
#colnames(p)[1] <- "Ticker"
#p <- mutate(p,Ticker=str_extract(Ticker,'\\(.+\\)'))
#p <- filter(p,!is.na(Ticker))
#p$Ticker <- str_replace_all(p$Ticker,'[\\(\\)]','')
#p <- read.csv('shadow_stock_portfolio.csv',skip=2,stringsAsFactors=FALSE)
#p2 <- read.csv("results.csv")
p2 <- filter(p,!(Ticker %in% holdings))
#p2 <- filter(p2,Score > 1,!(Ticker %in% holdings))
p2$Ticker <- as.character(p2$Ticker)
prospects <- p2$Ticker
prospects <- c(prospects,'SPY')
candidates <- filter(h2,!(Ticker %in% prospects))
todrop <- compareStocks(holdings)
todrop %>% arrange(-gain) %>% select(ticker,gainP)
prospects <- prospects[prospects != 'GLPW']
picks <- compareStocks(prospects)
picks %>% arrange(-gain) %>% select(ticker,gainP)
#filter(h2,!(Ticker %in% p$Ticker))
names(p2) <- gsub("\\.", "dot", names(p2))
#p2 <- mutate(p2, notes = NA2)
#notes <- filter(p2,str_length(NAdot)>5) %>% mutate(Notes = NAdot) %>%
#notes <- select(p2,Ticker,Notes) %>% filter(!is.na(Notes))
#notes
# Color code compared to SPY for same periods
# Go back to original financial package and see how much of this it can do
# Plot performance over past year
#ggplot(allPrices,aes(x=date,y=close)) +
#  geom_line() + scale_y_log10() + facet_wrap(~ ticker)
# Try plotting all 10 on same chart
#ggplot(allPrices,aes(x=date,y=close,colour=ticker)) +
#  geom_line() + scale_y_log10()
# plot the log price - better but not easily comparable
#ggplot(allPrices,aes(x=date,y=newPrice,colour=ticker)) + geom_line() + scale_y_log10()
aaiiSell <- filter(todrop,!(ticker %in% p$Ticker)) %>% arrange(-gain)
aaiiSell
ftotal <- sum(portfolio$Value)
groupsummary <- portfolio %>% group_by(type) %>% tally(Value) %>% mutate(share = n/ftotal)
groupsummary
mfdesc <- read.csv('mfdesc.csv')
funds <- filter(portfolio,type=="fund")
funds <- inner_join(funds,mfdesc)
mfperf <- compareStocks(funds$Symbol,12)
mfresults <- inner_join(funds,mfperf,by=c("Symbol" = "ticker")) %>%
arrange(-gain) %>%
select(Symbol,gainP,Value,Desc,Category)
mfresults
ftotal <- groupsummary$n[groupsummary$type=='fund']
#dist <- mfresults %>% group_by(Category) %>% tally(Value) %>% mutate(share = n/ftotal) %>% arrange(-share)
dist <- funds %>% group_by(Category) %>% tally(Value) %>% mutate(share = n/ftotal) %>% arrange(-share)
dist
library(quantmod)
library(BatchGetSymbols)
library(plyr)
library(dplyr)
library(scales)
library(lubridate)
library(stringr)
library(openxlsx)
library(rvest)
#library("here")
#set_here()
getPrices <- function(x){
tryCatch({
prices <- as.data.frame(Cl(x))
prices$date <- as.Date(rownames(prices))
#print('here')
#prices$ticker <- factor('SPY') # Need ticker symbol
#print('h2')
colnames(prices)[1] <- 'close'
#print('h3')
rownames(prices) <- NULL
#print('Not here')
prices$date <- ymd(prices$date)
return(prices)
}, error = function(err) {print(x)})
}
compareStocks <- function(tickers,timespan=4) {
first.date <- Sys.Date() - timespan*30
last.date <- Sys.Date()
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
allPrices <- l.out$df.tickers
allPrices <- select(allPrices,ticker,close=price.close,date=ref.date)
# Find Start price and append to rows
iPrice <- allPrices[allPrices$date==min(allPrices$date),]
iPrice <- subset(iPrice, select = -date)
colnames(iPrice) <- c('ticker','startPrice')
allPrices <- join(allPrices,iPrice)
# Scale the price by start price
# allPrices$newPrice <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gain <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gainP <- percent((allPrices$close/allPrices$startPrice) - 1)
results <- subset(allPrices,date==max(allPrices$date),select=c(date,ticker,gain,gainP))
}
compareStocksOLD <- function(tickers,timespan=4) {
# calculate start 1 year from today
#sDate <- today() - years(1)
sDate <- today("GMT") - months(timespan)
getSymbols(tickers,src='yahoo',from=as.character(sDate))
data <- mget(tickers)
allPrices <- ldply(data,getPrices)
colnames(allPrices) <- c('ticker','close','date')
#print(head(allPrices))
# Find Start price and append to rows
iPrice <- allPrices[allPrices$date==min(allPrices$date),]
iPrice <- subset(iPrice, select = -date)
colnames(iPrice) <- c('ticker','startPrice')
allPrices <- join(allPrices,iPrice)
# Scale the price by start price
# allPrices$newPrice <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gain <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gainP <- percent((allPrices$close/allPrices$startPrice) - 1)
# In order to pick which one to sell
#last <- max(ymd(allPrices$date[!is.na(allPrices$date)]))
#first <- min(ymd(allPrices$date[!is.na(allPrices$date)]))
#m3 <- last - days(90)
#m6 <- last - days(180)
# Create df with tickers and purchase date
# Calculate gain for past year
# subset(allPrices,date==last | date==m6 | date==m3,select=c(date,ticker,gain))
results <- subset(allPrices,date==max(allPrices$date),select=c(date,ticker,gain,gainP))
# Sort results by gain descending
#print(results[order(-results$gain),c('ticker','gainP')])
}
# update!  run bash shell, load xlsx, convert
# Update data files
fd <- file.info("ss.xlsx")$mtime
cd <- Sys.time()
dt <- difftime(cd, fd, units = "hours")
if (dt > 10) {
#system("./getSS.sh")
#system("./getET.sh")
}
callmorningstar <- function(ticker) {
url <- paste("http://financials.morningstar.com/company-profile/c.action?t=",
ticker,"&region=usa&culture=en-US",sep="")
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html")
# extract the content you need
pg <- read_html("scrape.html")
nt <- html_nodes(pg, xpath='//td') %>% html_text()
stockType <- nt[1]
stockSector <- nt[32]
stockIndustry <- nt[34]
data.frame(ticker=ticker,type=stockType,sector=stockSector,industry=stockIndustry)
}
et <- read.csv('etrade.csv',stringsAsFactors = FALSE,skip=6)
#et <- filter(et,!(Symbol %in% c('CASH','TOTAL')))
et <- head(et,-3)
portfolio <- mutate(et,type=ifelse(Symbol %in% c('YAFFX','PENNX','HFCGX','FAGIX','CHTTX','RZV','DGS','FM','VNQ','FPX','SPY','WHOSX','RSP','EQAL'),'fund','stock'))
#h2 <- read.csv("pfmDownload.csv",stringsAsFactors=FALSE)
colnames(portfolio) <- gsub("[^[:alnum:]///' ]", "", colnames(portfolio))
h2 <- filter(portfolio,type=='stock')
h2$Ticker <- as.character(h2$Symbol)
holdings <- h2$Ticker
holdings <- c(holdings,'CHGG','SPY')
p <- read.xlsx('ss.xlsx',1,skipEmptyRows = TRUE)
#p <- rename(p,Ticker=Company.(Ticker))
#colnames(p)[1] <- "Ticker"
#p <- mutate(p,Ticker=str_extract(Ticker,'\\(.+\\)'))
#p <- filter(p,!is.na(Ticker))
#p$Ticker <- str_replace_all(p$Ticker,'[\\(\\)]','')
#p <- read.csv('shadow_stock_portfolio.csv',skip=2,stringsAsFactors=FALSE)
#p2 <- read.csv("results.csv")
p2 <- filter(p,!(Ticker %in% holdings))
#p2 <- filter(p2,Score > 1,!(Ticker %in% holdings))
p2$Ticker <- as.character(p2$Ticker)
prospects <- p2$Ticker
prospects <- c(prospects,'SPY')
candidates <- filter(h2,!(Ticker %in% prospects))
todrop <- compareStocks(holdings)
todrop %>% arrange(-gain) %>% select(ticker,gainP)
prospects <- prospects[prospects != 'GLPW']
picks <- compareStocks(prospects)
picks %>% arrange(-gain) %>% select(ticker,gainP)
#filter(h2,!(Ticker %in% p$Ticker))
names(p2) <- gsub("\\.", "dot", names(p2))
#p2 <- mutate(p2, notes = NA2)
#notes <- filter(p2,str_length(NAdot)>5) %>% mutate(Notes = NAdot) %>%
#notes <- select(p2,Ticker,Notes) %>% filter(!is.na(Notes))
#notes
# Color code compared to SPY for same periods
# Go back to original financial package and see how much of this it can do
# Plot performance over past year
#ggplot(allPrices,aes(x=date,y=close)) +
#  geom_line() + scale_y_log10() + facet_wrap(~ ticker)
# Try plotting all 10 on same chart
#ggplot(allPrices,aes(x=date,y=close,colour=ticker)) +
#  geom_line() + scale_y_log10()
# plot the log price - better but not easily comparable
#ggplot(allPrices,aes(x=date,y=newPrice,colour=ticker)) + geom_line() + scale_y_log10()
aaiiSell <- filter(todrop,!(ticker %in% p$Ticker)) %>% arrange(-gain)
aaiiSell
ftotal <- sum(portfolio$Value)
groupsummary <- portfolio %>% group_by(type) %>% tally(Value) %>% mutate(share = n/ftotal)
groupsummary
mfdesc <- read.csv('mfdesc.csv')
funds <- filter(portfolio,type=="fund")
funds <- inner_join(funds,mfdesc)
mfperf <- compareStocks(funds$Symbol,12)
mfresults <- inner_join(funds,mfperf,by=c("Symbol" = "ticker")) %>%
arrange(-gain) %>%
select(Symbol,gainP,Value,Desc,Category)
mfresults
ftotal <- groupsummary$n[groupsummary$type=='fund']
#dist <- mfresults %>% group_by(Category) %>% tally(Value) %>% mutate(share = n/ftotal) %>% arrange(-share)
dist <- funds %>% group_by(Category) %>% tally(Value) %>% mutate(share = n/ftotal) %>% arrange(-share)
dist
#http://www.morningstar.com/stocks/XNAS/MSFT/quote.html
#http://financials.morningstar.com/company-profile/c.action?t=MSFT&region=usa&culture=en-US
# render HTML from the site with phantomjs
url <- "http://financials.morningstar.com/company-profile/c.action?t=MSFT&region=usa&culture=en-US"
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html")
# extract the content you need
pg <- read_html("scrape.html")
nt <- html_nodes(pg, xpath='//td') %>% html_text()
stockType <- nt[1]
stockSector <- nt[32]
stockIndustry <- nt[34]
#read mstar file
mstar <- read.csv('mstar.csv') %>% select(-X)
#anti join
tocall <- anti_join(picks,mstar)
#ldply the rest
df <- ldply(tocall$ticker,callmorningstar)
#union with mstar
mstar <- rbind(df,mstar)
#write mstar back out
write.csv(mstar,'mstar.csv')
#callmorningstar('chgg')
#df <- ldply(prospects,callmorningstar)
finalpicks <- join(picks,mstar) %>% arrange(-gain)
#finalpicks <- join(picks,mstar) %>% filter(type == 'Cyclical') %>% arrange(-gain)
#finalpicks <- join(picks,mstar) %>% filter(type != 'Cyclical') %>% arrange(-gain)
finalpicks
tocall <- anti_join(todrop,mstar)
df <- ldply(tocall$ticker,callmorningstar)
mstar <- rbind(df,mstar)
write.csv(mstar,'mstar.csv')
finaldrops <- join(todrop,mstar) %>% arrange(-gain)
finaldrops
library(quantmod)
library(BatchGetSymbols)
library(plyr)
library(dplyr)
library(scales)
library(lubridate)
library(stringr)
library(openxlsx)
library(rvest)
#library("here")
#set_here()
getPrices <- function(x){
tryCatch({
prices <- as.data.frame(Cl(x))
prices$date <- as.Date(rownames(prices))
#print('here')
#prices$ticker <- factor('SPY') # Need ticker symbol
#print('h2')
colnames(prices)[1] <- 'close'
#print('h3')
rownames(prices) <- NULL
#print('Not here')
prices$date <- ymd(prices$date)
return(prices)
}, error = function(err) {print(x)})
}
compareStocks <- function(tickers,timespan=4) {
first.date <- Sys.Date() - timespan*30
last.date <- Sys.Date()
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
allPrices <- l.out$df.tickers
allPrices <- select(allPrices,ticker,close=price.close,date=ref.date)
# Find Start price and append to rows
iPrice <- allPrices[allPrices$date==min(allPrices$date),]
iPrice <- subset(iPrice, select = -date)
colnames(iPrice) <- c('ticker','startPrice')
allPrices <- join(allPrices,iPrice)
# Scale the price by start price
# allPrices$newPrice <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gain <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gainP <- percent((allPrices$close/allPrices$startPrice) - 1)
results <- subset(allPrices,date==max(allPrices$date),select=c(date,ticker,gain,gainP))
}
compareStocksOLD <- function(tickers,timespan=4) {
# calculate start 1 year from today
#sDate <- today() - years(1)
sDate <- today("GMT") - months(timespan)
getSymbols(tickers,src='yahoo',from=as.character(sDate))
data <- mget(tickers)
allPrices <- ldply(data,getPrices)
colnames(allPrices) <- c('ticker','close','date')
#print(head(allPrices))
# Find Start price and append to rows
iPrice <- allPrices[allPrices$date==min(allPrices$date),]
iPrice <- subset(iPrice, select = -date)
colnames(iPrice) <- c('ticker','startPrice')
allPrices <- join(allPrices,iPrice)
# Scale the price by start price
# allPrices$newPrice <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gain <- (allPrices$close/allPrices$startPrice) - 1
allPrices$gainP <- percent((allPrices$close/allPrices$startPrice) - 1)
# In order to pick which one to sell
#last <- max(ymd(allPrices$date[!is.na(allPrices$date)]))
#first <- min(ymd(allPrices$date[!is.na(allPrices$date)]))
#m3 <- last - days(90)
#m6 <- last - days(180)
# Create df with tickers and purchase date
# Calculate gain for past year
# subset(allPrices,date==last | date==m6 | date==m3,select=c(date,ticker,gain))
results <- subset(allPrices,date==max(allPrices$date),select=c(date,ticker,gain,gainP))
# Sort results by gain descending
#print(results[order(-results$gain),c('ticker','gainP')])
}
# update!  run bash shell, load xlsx, convert
# Update data files
fd <- file.info("ss.xlsx")$mtime
cd <- Sys.time()
dt <- difftime(cd, fd, units = "hours")
if (dt > 10) {
#system("./getSS.sh")
#system("./getET.sh")
}
callmorningstar <- function(ticker) {
url <- paste("http://financials.morningstar.com/company-profile/c.action?t=",
ticker,"&region=usa&culture=en-US",sep="")
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html")
# extract the content you need
pg <- read_html("scrape.html")
nt <- html_nodes(pg, xpath='//td') %>% html_text()
stockType <- nt[1]
stockSector <- nt[32]
stockIndustry <- nt[34]
data.frame(ticker=ticker,type=stockType,sector=stockSector,industry=stockIndustry)
}
et <- read.csv('etrade.csv',stringsAsFactors = FALSE,skip=6)
#et <- filter(et,!(Symbol %in% c('CASH','TOTAL')))
et <- head(et,-3)
portfolio <- mutate(et,type=ifelse(Symbol %in% c('YAFFX','PENNX','HFCGX','FAGIX','CHTTX','RZV','DGS','FM','VNQ','FPX','SPY','WHOSX','RSP','EQAL'),'fund','stock'))
#h2 <- read.csv("pfmDownload.csv",stringsAsFactors=FALSE)
colnames(portfolio) <- gsub("[^[:alnum:]///' ]", "", colnames(portfolio))
h2 <- filter(portfolio,type=='stock')
h2$Ticker <- as.character(h2$Symbol)
holdings <- h2$Ticker
holdings <- c(holdings,'CHGG','SPY')
p <- read.xlsx('ss.xlsx',1,skipEmptyRows = TRUE)
#p <- rename(p,Ticker=Company.(Ticker))
#colnames(p)[1] <- "Ticker"
#p <- mutate(p,Ticker=str_extract(Ticker,'\\(.+\\)'))
#p <- filter(p,!is.na(Ticker))
#p$Ticker <- str_replace_all(p$Ticker,'[\\(\\)]','')
#p <- read.csv('shadow_stock_portfolio.csv',skip=2,stringsAsFactors=FALSE)
#p2 <- read.csv("results.csv")
p2 <- filter(p,!(Ticker %in% holdings))
#p2 <- filter(p2,Score > 1,!(Ticker %in% holdings))
p2$Ticker <- as.character(p2$Ticker)
prospects <- p2$Ticker
prospects <- c(prospects,'SPY')
candidates <- filter(h2,!(Ticker %in% prospects))
todrop <- compareStocks(holdings)
todrop %>% arrange(-gain) %>% select(ticker,gainP)
prospects <- prospects[prospects != 'GLPW']
picks <- compareStocks(prospects)
picks %>% arrange(-gain) %>% select(ticker,gainP)
#filter(h2,!(Ticker %in% p$Ticker))
names(p2) <- gsub("\\.", "dot", names(p2))
#p2 <- mutate(p2, notes = NA2)
#notes <- filter(p2,str_length(NAdot)>5) %>% mutate(Notes = NAdot) %>%
#notes <- select(p2,Ticker,Notes) %>% filter(!is.na(Notes))
#notes
# Color code compared to SPY for same periods
# Go back to original financial package and see how much of this it can do
# Plot performance over past year
#ggplot(allPrices,aes(x=date,y=close)) +
#  geom_line() + scale_y_log10() + facet_wrap(~ ticker)
# Try plotting all 10 on same chart
#ggplot(allPrices,aes(x=date,y=close,colour=ticker)) +
#  geom_line() + scale_y_log10()
# plot the log price - better but not easily comparable
#ggplot(allPrices,aes(x=date,y=newPrice,colour=ticker)) + geom_line() + scale_y_log10()
aaiiSell <- filter(todrop,!(ticker %in% p$Ticker)) %>% arrange(-gain)
aaiiSell
ftotal <- sum(portfolio$Value)
groupsummary <- portfolio %>% group_by(type) %>% tally(Value) %>% mutate(share = n/ftotal)
groupsummary
mfdesc <- read.csv('mfdesc.csv')
funds <- filter(portfolio,type=="fund")
funds <- inner_join(funds,mfdesc)
mfperf <- compareStocks(funds$Symbol,12)
mfresults <- inner_join(funds,mfperf,by=c("Symbol" = "ticker")) %>%
arrange(-gain) %>%
select(Symbol,gainP,Value,Desc,Category)
mfresults
ftotal <- groupsummary$n[groupsummary$type=='fund']
#dist <- mfresults %>% group_by(Category) %>% tally(Value) %>% mutate(share = n/ftotal) %>% arrange(-share)
dist <- funds %>% group_by(Category) %>% tally(Value) %>% mutate(share = n/ftotal) %>% arrange(-share)
dist
#http://www.morningstar.com/stocks/XNAS/MSFT/quote.html
#http://financials.morningstar.com/company-profile/c.action?t=MSFT&region=usa&culture=en-US
# render HTML from the site with phantomjs
url <- "http://financials.morningstar.com/company-profile/c.action?t=MSFT&region=usa&culture=en-US"
writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con="scrape.js")
system("phantomjs scrape.js > scrape.html")
# extract the content you need
pg <- read_html("scrape.html")
nt <- html_nodes(pg, xpath='//td') %>% html_text()
stockType <- nt[1]
stockSector <- nt[32]
stockIndustry <- nt[34]
#read mstar file
mstar <- read.csv('mstar.csv') %>% select(-X)
#anti join
tocall <- anti_join(picks,mstar)
#ldply the rest
df <- ldply(tocall$ticker,callmorningstar)
#union with mstar
mstar <- rbind(df,mstar)
#write mstar back out
write.csv(mstar,'mstar.csv')
#callmorningstar('chgg')
#df <- ldply(prospects,callmorningstar)
finalpicks <- join(picks,mstar) %>% arrange(-gain)
#finalpicks <- join(picks,mstar) %>% filter(type == 'Cyclical') %>% arrange(-gain)
#finalpicks <- join(picks,mstar) %>% filter(type != 'Cyclical') %>% arrange(-gain)
finalpicks
tocall <- anti_join(todrop,mstar)
df <- ldply(tocall$ticker,callmorningstar)
mstar <- rbind(df,mstar)
write.csv(mstar,'mstar.csv')
finaldrops <- join(todrop,mstar) %>% arrange(-gain)
finaldrops
